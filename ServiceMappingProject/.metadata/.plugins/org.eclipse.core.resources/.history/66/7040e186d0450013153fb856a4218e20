package DataBase;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import org.eclipse.swt.SWT;
import org.eclipse.swt.widgets.MessageBox;

import Main.MainFrame;

public class ServiceQueries {
	private Statement showTableListStatement = null;
	private Statement showTableNumberStatement = null;	
	private ResultSet tableNumberResultSet = null;
	private ResultSet tableListResultSet = null;
	
	private Statement findParentServiceStatement = null;
	private Statement parentServiceNumberStatement = null;
	private ResultSet parentServiceResultSet = null;
	private ResultSet parentServiceNumberResultSet = null;
	
	private Statement findChildServiceStatement = null;
	private Statement childServiceNumberStatement = null;	
	private ResultSet childServiceResultSet = null;
	private ResultSet childServiceNumberResultSet = null;
	
	private Statement findPropertyByServiceNameStatement = null;
	private ResultSet propertyByServiceNameResultSet = null;
	
	private Statement findSelectedServiceByServiceNameStatement = null;
	private ResultSet selectedServiceByServiceNameResultSet = null;
	
	private Statement findTablePropertyStatement = null;
	private ResultSet findTablePropertyResultSet = null;
	
	private Statement countRowNumberStatement = null;
	private ResultSet countRowNumberResultSet = null;
	
	//테이블 내 튜플(행)의 개수 검색
	public int getTableRowNumber(String companyName){
		
		//테이블의 튜플(행) 개수 검색
		String countRowNumberQuery = "select count(*) from " + companyName;
		int tableRowNumber = -1;
		
		try{
			countRowNumberStatement = DBConnection.connection.createStatement();
			countRowNumberResultSet = countRowNumberStatement.executeQuery(countRowNumberQuery);

			while(countRowNumberResultSet.next()){
				tableRowNumber = countRowNumberResultSet.getInt(1);
			}
		}
		catch(SQLException sqlException){
		}
		return tableRowNumber;
	}
	//서비스 모두 삭제
	public void deleteAllService(){
		String[] companyList = setCompanyNameComboList();
		for(int i=0; i<companyList.length; i++){
			try{
				PreparedStatement deleteCompanyStatement = DBConnection.connection.prepareStatement("drop table "+companyList[i]);	//회사명 삭제
				deleteCompanyStatement.executeUpdate();
			}catch(SQLException e){}
		}
		MessageBox deleteMessageBox = new MessageBox(MainFrame.shell, SWT.ICON_INFORMATION);
		deleteMessageBox.setText("Delete All");
		deleteMessageBox.setMessage("Delete All Success");
		deleteMessageBox.open();
	}
	//서비스 삭제
	public void deleteService(String companyName, String serviceName){

		String deleteQuery = "delete from " + companyName + " where Name = ?";
		try{
			PreparedStatement deleteServiceStatement = DBConnection.connection.prepareStatement(deleteQuery);
			deleteServiceStatement.setString(1, serviceName);
			deleteServiceStatement.executeUpdate();
			
			Statement numberOfServiceStatement = DBConnection.connection.createStatement();
			ResultSet numberOfServiceResultSet = numberOfServiceStatement.executeQuery("select count(*) from "+companyName);
			int numberOfService = 0;
			while(numberOfServiceResultSet.next()){
				numberOfService = numberOfServiceResultSet.getInt(1);
			}
			if(numberOfService == 0){	//서비스가 없다면
				PreparedStatement deleteCompanyStatement = DBConnection.connection.prepareStatement("drop table "+companyName);	//회사명 삭제
				deleteCompanyStatement.executeUpdate();
			}
			
			MessageBox deleteMessageBox = new MessageBox(MainFrame.shell, SWT.ICON_INFORMATION);
			deleteMessageBox.setText("Delete");
			deleteMessageBox.setMessage("Delete Success");
			deleteMessageBox.open();	
		}
		catch(SQLException sqlException){
			MessageBox errorMessageBox = new MessageBox(MainFrame.shell, SWT.ICON_ERROR);
			errorMessageBox.setText("Failed");
			errorMessageBox.setMessage("Delete Failed");
			errorMessageBox.open();	
		}
	}
	
	//테이블 아이템 속성 검색(Name, DomainTask, Stype)
	public String[] getTableProperty(String companyName, String serviceName){
		
		//Service Name, DomainTask, SType 검색
		String findTablePropertyQuery = "select Name, DomainTask, SType from " + companyName + " where Name= '" + serviceName + "'";
		String[] tablePropertyList = null;
		try{
			//해당 서비스의 Name, DomainTask, SType 필드
			findTablePropertyStatement = DBConnection.connection.createStatement();
			findTablePropertyResultSet = findTablePropertyStatement.executeQuery(findTablePropertyQuery);

			//해당 서비스의 Name, DomainTask, SType 속성 값을 얻음
			tablePropertyList = new String[4];
			while(findTablePropertyResultSet.next()){

				tablePropertyList[0] = companyName;
				tablePropertyList[1] = findTablePropertyResultSet.getString(1);	//Name
				tablePropertyList[2] = findTablePropertyResultSet.getString(2);	//DomainTask
				tablePropertyList[3] = findTablePropertyResultSet.getString(3);	//Stype
			}
		}
		catch(SQLException sqlException){}
		return tablePropertyList;
	}
	
	//검색된 필드의 속성 검색
	public String getSelectedServicePropertyByServiceName(String companyName, String serviceName, String selectedField){
		
		//해당 서비스에 해당하는 ParentService 필드 검색
		String findSelectedServiceByServiceNameQuery = "select " + selectedField + " from " + companyName + " where Name= '" + serviceName + "'";
		String selectedServiceName = null;
		
		try{
			
			//해당 서비스의 ParentService 필드
			findSelectedServiceByServiceNameStatement = DBConnection.connection.createStatement();
			selectedServiceByServiceNameResultSet = findSelectedServiceByServiceNameStatement.executeQuery(findSelectedServiceByServiceNameQuery);
			
			//해당 서비스의 ParentService 속성 값을 얻음
			while(selectedServiceByServiceNameResultSet.next()){
				
				selectedServiceName = selectedServiceByServiceNameResultSet.getString(1);
			}
		}
		catch(SQLException sqlException){
			
		}
		
		return selectedServiceName;
	}
	
	//서비스 이름으로 속성 검색
	public String[] getPropertyByServiceName(String companyName, String serviceName){
		
		//해당 서비스에 해당하는 모든 필드 검색
		String findPropertyByServiceNameQuery = "select * from " + companyName + " where Name= '" + serviceName + "'";
		String[] servicePropertyList = null;
		
		try{
			
			//해당 서비스의 속성 목록
			findPropertyByServiceNameStatement = DBConnection.connection.createStatement();
			propertyByServiceNameResultSet = findPropertyByServiceNameStatement.executeQuery(findPropertyByServiceNameQuery);
			
			//해당 서비스의 속성 목록을 얻음			
			servicePropertyList = new String[17];	//15개 속성 + 2개(임의로 정한 속성 - 부모, 자식서비스)			
			while(propertyByServiceNameResultSet.next()){ //ResultSet에 튜플(한행) 하나씩 담아 ResultSet의 next()메서드를 이용해 검색
				
				for(int index=0; index<servicePropertyList.length; index++){
					
					//속성이 Priority 이라면
					if(index == 5){
						double priorityProperty = propertyByServiceNameResultSet.getDouble(index + 1);
						servicePropertyList[index] = Double.toString(priorityProperty);
					}
					//나머지 속성 이라면
					else{
						servicePropertyList[index] = propertyByServiceNameResultSet.getString(index + 1);
					}
				}
			}		
		}
		catch(SQLException sqlException){
			
		}
		
		return servicePropertyList;
	}
	
	//부모 서비스 콤보 목록 설정
	public String[] setParentServiceNameComboList(String selectedItem){	//인자로 회사 이름
		
		//선택된 회사의 서비스 이름 값들을 검색
		String findParentServiceQuery = "select Name from " + selectedItem;
		
		//선택된 회사의 서비스 개수를 검색
		String parentServiceNumberQuery = "select count(*) from " + selectedItem;
		
		String[] serviceNameList = null;
		
		try{
			//서비스 목록
			findParentServiceStatement = DBConnection.connection.createStatement();
			parentServiceResultSet = findParentServiceStatement.executeQuery(findParentServiceQuery);
			
			//서비스 개수
			parentServiceNumberStatement = DBConnection.connection.createStatement();
			parentServiceNumberResultSet = parentServiceNumberStatement.executeQuery(parentServiceNumberQuery);
			
			//서비스 개수를 얻음
			int parentServiceNumber = 0;
			while(parentServiceNumberResultSet.next()){				
				
				parentServiceNumber = parentServiceNumberResultSet.getInt(1);
			}
			
			//서비스 목록을 얻음
			serviceNameList = new String[parentServiceNumber];							
			int serviceCount = 0;
			while(parentServiceResultSet.next()){
				
				serviceNameList[serviceCount++] = parentServiceResultSet.getString(1);			
			}	
		}
		catch(SQLException sqlException){
		}
		
		return serviceNameList;		
	}
	
	//자식 서비스 콤보 목록 설정
	public String[] setChildServiceNameComboList(String selectedItem){	//인자로 회사 이름
		
		//선택된 회사의 서비스 이름 값들을 검색
		String findChildServiceQuery = "select Name from " + selectedItem;

		//선택된 회사의 서비스 개수를 검색
		String childServiceNumberQuery = "select count(*) from " + selectedItem;

		String[] serviceNameList = null;

		try{

			//서비스 목록
			findChildServiceStatement = DBConnection.connection.createStatement();
			childServiceResultSet = findChildServiceStatement.executeQuery(findChildServiceQuery);

			//서비스 개수
			childServiceNumberStatement = DBConnection.connection.createStatement();
			childServiceNumberResultSet = childServiceNumberStatement.executeQuery(childServiceNumberQuery);

			//서비스 개수를 얻음
			int childServiceNumber = 0;
			while(childServiceNumberResultSet.next()){				
				childServiceNumber = childServiceNumberResultSet.getInt(1);
			}

			//서비스 목록을 얻음
			serviceNameList = new String[childServiceNumber];							
			int serviceCount = 0;
			while(childServiceResultSet.next()){

				serviceNameList[serviceCount++] = childServiceResultSet.getString(1);			
			}	
		}
		catch(SQLException sqlException){
		}

		return serviceNameList;	
	}
	
	//회사이름 콤보 목록 설정
	public String[] setCompanyNameComboList(){
		
		//모든 테이블 출력		
		String showTableListQuery = "show tables";
		
		//모든 테이블의 개수 출력
		String showTableNumberQuery = "select count(*) from information_schema.tables where table_schema = 'Company' and TABLE_TYPE='BASE TABLE'";	
		
		String[] tableList = null;		
		
		try{
			
			//테이블 개수
			showTableNumberStatement = DBConnection.connection.createStatement();
			tableNumberResultSet = showTableNumberStatement.executeQuery(showTableNumberQuery);
			
			//테이블 목록
			showTableListStatement = DBConnection.connection.createStatement();
			tableListResultSet = showTableListStatement.executeQuery(showTableListQuery);
						
			//테이블 개수를 얻음
			int tableNumber = 0;
			while(tableNumberResultSet.next()){				
				tableNumber = tableNumberResultSet.getInt(1);
			}
			
			//테이블 목록을 얻음
			tableList = new String[tableNumber];							
			int tableCount = 0;
			while(tableListResultSet.next()){
				
				tableList[tableCount++] = tableListResultSet.getString(1);			
			}	
		}
		catch(SQLException sqlException){
		}				
				
		return tableList;	//테이블 목록을 반환
	}
}